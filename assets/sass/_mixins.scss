// Mixin para estilos del tooltip
@mixin tooltip-style {
  // Estilos del tooltip
  position: relative;

  &::after {
    content: attr(data-tooltip);
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    padding: $tooltip-padding;
    background-color: $tooltip-background;
    color: $tooltip-text-color;
    border-radius: 4px;
    font-size: $tooltip-font-size;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    text-align: center;
    transition: opacity 0.2s, visibility 0.2s;
  }

  &:hover::after {
    opacity: 1;
    visibility: visible;
  }
}

// Uso del mixin en diferentes elementos
.tooltip-github {
  @include tooltip-style;
  &::after {
    top: -50px;
  }
}

.tooltip-linkedin {
  @include tooltip-style;
  &::after {
    top: -50px;
  }
}

.tooltip-portfolio {
  @include tooltip-style;
  &::after {
    top: -50px;
  }
}

// Flexbox Mixins
@mixin flex-row {
  display: flex;
  flex-direction: row;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  align-items: center;
  justify-content: space-between;
}

// Query Mixins
@mixin mediaQuery($breakpoint) {
  @if $breakpoint == smallPhone {
    @media only screen and (min-width: $breakpoint-mobile-sm) {
      @content;
    }
  }

  @if $breakpoint == phone {
    @media only screen and (min-width: $breakpoint-mobile) {
      @content;
    }
  }

  @if $breakpoint == tablet {
    @media only screen and (min-width: $breakpoint-tablet) {
      @content;
    }
  }

  @if $breakpoint == desktop {
    @media only screen and (min-width: $breakpoint-desktop) {
      @content;
    }
  }
}


/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {List}            - text-shadow list
@function stroke($stroke, $color) {
  $shadow: ();
  $from: $stroke*-1;
  @for $i from $from through $stroke {
   @for $j from $from through $stroke {
      $shadow: append($shadow, $i*1px $j*1px 0 $color, comma);
    }
  }
  @return $shadow;
}
/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {Style}           - text-shadow
@mixin stroke($stroke, $color) {
  text-shadow: stroke($stroke, $color);
}
